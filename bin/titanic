#!/usr/bin/env node

var os = require('os'),
  fs = require('fs');

process.argv = process.argv.slice(1); // C like argv

if (!process.argv[1]) {
  usage();
}

var eol = 'win32' === os.platform() ? '\r\n' : '\n'

var clientjs = [  
  'var tagValue = {',
  '  input: \'value\',',
  '  textarea: \'innerHTML\',',
  '  button: \'innerHTML\',',
  '  div: \'innerHTML\',',
  '  img: \'src\',',
  '  a: \'href\'',
  '}',
  '',
  'function toObj(r) {',
  '	for (var i = 0, x = {}; i<r.length; x[r[i]] = \'\', i++); // I had fun writing this',
  '	return x;',
  '}',
  '',
  'function getValue(e) {',
  '  var value, callee, socket = false, tag;',
  '  ',
  '  if (typeof e.element !== "undefined") { // socket.io handling',
  '    e = document.getElementById(e.element);',
  '    socket = true;',
  '  }',
  '  ',
  '  tag = e.tagName.toLowerCase();',
  '  value = e[tagValue[tag]];',
  '  ',
  '  if (socket) {',
  '    window.socket.emit(\'value\', value);',
  '  } else {',
  '    return value;',
  '  }',
  '}',
  '',
  'function setValue(e, value) {',
  '  var value, callee, emit = {}, socket = false;',
  '  ',
  '  if (!value) { // socket.io handling',
  '    e = document.getElementById(e.element);',
  '    value = e.value;',
  '    socket = true;',
  '  }',
  '  ',
  '  tag = e.tagName.toLowerCase();',
  '  ',
  '  e[tagValue[tag]] = value;',
  '}',
  '',
  'function idExist(id) {',
  '  return document.getElementById(id) !== null;',
  '}',
  '',
  'document.addEventListener(\'DOMContentLoaded\', function() { // $(document).ready equivalent',
  '  var permised = [\'button\', \'input\', \'label\', \'br\', \'textarea\'];',
  '  window.socket = io.connect(\'http://localhost\'); // estabilish a socket.io connection',
  '  ',
  '  window.socket.on(\'html\', function(data) {',
  '    if (data && data.html) {',
  '      document.getElementsByTagName(\'body\')[0].innerHTML = data.html;',
  '      return;',
  '    }',
  '    ',
  '    window.socket.emit(\'html\', document.getElementsByTagName(\'body\')[0].innerHTML);',
  '  });',
  '  ',
  '  window.socket.on(\'element\', function(data) {',
  '    var el;',
  '    ',
  '    if (!data || !data.elements)',
  '      return;',
  '    ',
  '    switch (data.action) {',
  '      case \'add\':',
  '        data.elements.forEach(function(currentElement) {',
  '          if (!~permised.indexOf(currentElement.tag)) ',
  '            return;',
  '          ',
  '          el = document.createElement(currentElement.tag);',
  '          ',
  '          if (currentElement.x || currentElement.y) {',
  '            el.style.position = \'absolute\';',
  '            if (currentElement.x) el.style.left = currentElement.x;',
  '            if (currentElement.y) el.style.top = currentElement.y;',
  '          }',
  '          ',
  '          if (currentElement.height)',
  '            el.style.height = currentElement.height;',
  '          ',
  '          if (currentElement.width)',
  '            el.style.width = currentElement.width;',
  '          ',
  '          if (currentElement.id)',
  '            el.id = currentElement.id;',
  '          ',
  '          if (idExist(currentElement.id))',
  '            return;',
  '          ',
  '          document.getElementsByTagName(\'body\')[0].appendChild(el);',
  '          ',
  '          if (currentElement.value)',
  '            setValue(el, currentElement.value);',
  '        });',
  '        ',
  '        break;',
  '    }',
  '  });',
  '  ',
  '  window.socket.on(\'event\', function(evs) {',
  '    evs.events.forEach(function(data) {',
  '      Object.keys(data).forEach(function(x) {',
  '        document.getElementById(x).addEventListener(data[x], function(ev) {',
  '          var event = {}, value = getValue(ev.target);',
  '          ',
  '          event.element = {value: value, id: ev.target.id};',
  '          event.event = data[x];',
  '          window.socket.emit(\'event\', event);',
  '          ',
  '        });',
  '      });',
  '    });',
  '  });',
  '  ',
  '  window.socket.on(\'get_value\', getValue);',
  '  window.socket.on(\'set_value\', setValue);',
  '  ',
  '  window.socket.emit(\'ready\');',
  '});',
].join(eol);

var html = [  
  '<html>',
  '  <head>',
  '    <script src="/socket.io/socket.io.js"></script>',
  '    <script src="/client.js" type="text/javascript"></script>',
  '  </head>',
  '  <body>',
  '  </body>',
  '</html>',
].join(eol);

var app = [  
  'var titanic = require("titanic"),',
  '  Server = titanic.Server,',
  '  Input = titanic.Input,',
  '  Break = titanic.Break,',
  '  Button = titanic.Button;',
  '',
  '',
  'var serv = new Server();',
  '',
  'serv.listen(function(err, ctx) {',
  '  var butt = new Button({',
  '    value: \'Click me!\',',
  '  });',
  '  ',
  '  var input = new Input();',
  '  ',
  '  butt.click(function() {',
  '    this.getValue(input.id, function(data) { console.log(data); });',
  '  });',
  '  ',
  '  ctx.add([butt, Break, input]);',
  '});',
  '',
].join(eol);

fs.mkdirSync(process.argv[1]);
fs.mkdirSync(process.argv[1]+'/html');
fs.mkdirSync(process.argv[1]+'/js');
fs.mkdirSync(process.argv[1]+'/css');

fs.writeFileSync(process.argv[1]+'/js/client.js', clientjs);
fs.writeFileSync(process.argv[1]+'/html/index.html', html);
fs.writeFileSync(process.argv[1]+'/app.js', app);

function usage() {
  console.log('Usage: titanic <appname>');
  process.exit(1);
}